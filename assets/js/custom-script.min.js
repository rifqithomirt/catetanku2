var R = {
  host: '103.146.203.103',
  port: 9898
}
createForm = function (option) {
  var str = `
	<div class="section">
      <div class="row">
        <div class="col s12 c-head-title">
          <div class="c-header">
            <div ${ 'titleID' in option ? ' id="' + option.titleID + '"' : ''} class="c-title ${ 'titleClass' in option ? option.titleClass : ''}">${option.title}</div>
          </div>
        </div>
      </div>
      <div class="vx-card">
        <div class="vx-card__collapsible-content">
        <div class="vx-card__body">
        
          <div class="form_data row container mx-2">
            <div class="row">
              <form class="col s12" ${ 'formID' in option ? 'id="' + option.formID + '"' : ''}>
                ${ option.arrayForm.map( ( forms ) => {
                		return forms;
                	}) }
                </div>
              </form>
            </div>
          </div>
        </div>
        </div>
      </div>
    </div>`;
  return str;
}

R.apost = async function (url, token, obj) {
  var options = {
    method: 'post',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json; charset=utf-8'
    },
    body: JSON.stringify(obj)
  }
  if (token != '') options.headers['Authorization'] = 'Bearer ' + token;
  var res = await fetch(url, options)
  if (res.status == 200) return res.json()
  else return {
    'status': res.status
  }
}

R.aput = async function (url, token, obj) {
  var options = {
    method: 'put',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json; charset=utf-8'
    },
    body: JSON.stringify(obj)
  }
  if (token != '') options.headers['Authorization'] = 'Bearer ' + token;
  var res = await fetch(url, options)
  if (res.status == 200) return res.json()
  else return {
    'status': res.status
  }
}

R.aget = async function (url, token, obj) {
  var options = {
    method: 'get',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json; charset=utf-8'
    }
  }
  if (token != '') options.headers['Authorization'] = 'Bearer ' + token;
  var res = await fetch(url, options)
  if (res.status == 200) return res.json()
  else return {
    'status': res.status
  }
}

R.agetFile = async function (url, token, obj) {
  var options = {
    method: 'get',
    headers: {
      'Accept': 'text/plain',
      'Content-Type': 'text/plain'
    }
  }
  if (token != '') options.headers['Authorization'] = 'Bearer ' + token;
  var res = await fetch(url, options)
  if (res.status == 200) return res.text();
  else return {
    'status': res.status
  }
}

R.adelete = async function (url, token, obj) {
  var options = {
    method: 'delete',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json; charset=utf-8'
    }
  }
  if (token != '') options.headers['Authorization'] = 'Bearer ' + token;
  var res = await fetch(url, options)
  if (res.status == 200) return res.json()
  else return {
    'status': res.status
  }
}