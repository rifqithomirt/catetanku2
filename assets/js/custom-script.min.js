var R = {
  protocol: 'https',
  host: window.location.hostname,
  port: 9000
}
createForm = function (option) {
  var str = `
	<div class="section">
      <div class="row">
        <div class="col s12 c-head-title">
          <div class="c-header">
            <div ${ 'titleID' in option ? ' id="' + option.titleID + '"' : ''} class="c-title ${ 'titleClass' in option ? option.titleClass : ''}">${option.title}</div>
          </div>
        </div>
      </div>
      <div class="vx-card">
        <div class="vx-card__collapsible-content">
        <div class="vx-card__body">
        
          <div class="form_data row container mx-2">
            <div class="row">
              <form class="col s12" ${ 'formID' in option ? 'id="' + option.formID + '"' : ''}>
                ${ option.arrayForm.map( ( forms ) => {
                		return forms;
                	}) }
                </div>
              </form>
            </div>
          </div>
        </div>
        </div>
      </div>
    </div>`;
  return str;
}

R.apost = async function (url, token, obj) {
  var options = {
    method: 'post',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json; charset=utf-8'
    },
    body: JSON.stringify(obj)
  }
  if (token != '') options.headers['Authorization'] = 'Bearer ' + token;
  var res = await fetch(url, options)
  if (res.status == 200) return res.json()
  else return {
    'status': res.status
  }
}

R.aput = async function (url, token, obj) {
  var options = {
    method: 'put',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json; charset=utf-8'
    },
    body: JSON.stringify(obj)
  }
  if (token != '') options.headers['Authorization'] = 'Bearer ' + token;
  var res = await fetch(url, options)
  if (res.status == 200) return res.json()
  else return {
    'status': res.status
  }
}

R.aget = async function (url, token, obj) {
  var options = {
    method: 'get',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json; charset=utf-8'
    }
  }
  if (token != '') options.headers['Authorization'] = 'Bearer ' + token;
  var res = await fetch(url, options)
  if (res.status == 200) return res.json()
  else return {
    'status': res.status
  }
}

R.agetFile = async function (url, token, obj) {
  var options = {
    method: 'get',
    headers: {
      'Accept': 'text/plain',
      'Content-Type': 'text/plain'
    }
  }
  if (token != '') options.headers['Authorization'] = 'Bearer ' + token;
  var res = await fetch(url, options)
  if (res.status == 200) return res.text();
  else return {
    'status': res.status
  }
}

R.adelete = async function (url, token, obj) {
  var options = {
    method: 'delete',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json; charset=utf-8'
    }
  }
  if (token != '') options.headers['Authorization'] = 'Bearer ' + token;
  var res = await fetch(url, options)
  if (res.status == 200) return res.json()
  else return {
    'status': res.status
  }
}

R.numberToRupiah = function (bilangan) {
  var number_string = bilangan.toString(),
    sisa = number_string.length % 3,
    rupiah = number_string.substr(0, sisa),
    ribuan = number_string.substr(sisa).match(/\d{3}/g);

  if (ribuan) {
    separator = sisa ? '.' : '';
    rupiah += separator + ribuan.join('.');
  }
  return rupiah;
}

R.rupiahToNumber = function (rupiah) {
  return rupiah.replace(/\./g, '').replace('Rp', '').trim() * 1;
}

R.conditionerString = function (text) {
  return text.replace(/\r/g, ' ').replace(/\n/g, ' ').replace(/\'/g, '').replace(/\"/g, '');
}

R.asyncForEach = async function (array, callback) {
  for (let index = 0; index < array.length; index++) {
    await callback(array[index], index, array);
  }
}

R.getUrlVars = function (  ) {
    var vars = [], hash;
    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
    for(var i = 0; i < hashes.length; i++)
    {
        hash = hashes[i].split('=');
        vars.push(hash[0]);
        vars[hash[0]] = hash[1];
    }
    return vars;
}

R.pad = function  (str, max) {
  return ('0'.repeat(max) + str).slice(-max); 
}